
package PECL1;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;

parser code
{:
	public static void main (String argc[]) throws Exception{
	   String extension="";
	   String programa=argc[0]; 

	   /****** COMPROBACION EXTENSION *******/
	   	for (int i=programa.length()-4;i<programa.length();i++){
	   		extension=extension+programa.charAt(i);
	   	}
		if(extension.equals(".bas")){
			System.out.println(">>> PRACTICA PROCESADORES 2017/2018 <<<\n");
			System.out.println("Nombre del programa: " + programa+"\n");

			/****** IMPRIMIR EL PROGRAMA A LEER ******/ 
			String cadena;
	     	FileInputStream basic =new FileInputStream(programa);
			FileReader program = new FileReader(programa);
			BufferedReader print_program = new BufferedReader(program);
			while((cadena = print_program.readLine())!=null) {
				System.out.println(cadena);
			}
			print_program.close();

			/****** INICIALIZAR EL ANALIZADOR ******/

	     	Analizador_LexicoLex y=new Analizador_LexicoLex(basic);
	   		Analizador_SintacticoCup principal=new Analizador_SintacticoCup(y);
	   		principal.parse();
	   		System.out.println("\n****** ANALIZADOR LEXICO ******\n");
	   		y.writeOutputFile();
	   		System.out.println("\n\nNumero de errorres lexicos: "+ y.getErr()+"\n");	   		
	  }
	  else{
	  	System.err.println("ERROR. EL ARCHIVO DEBE DE SER .bas");
	  }
	}  
	//Errores sintacticos
	public void syntax_error(Symbol s) {
	  System.err.println("Error de sintaxis linea " +(s.left+1)+" en o cerca de "+s.value); 
	}  
	//Errores Sintacticos que no se pueden recuerar
	public void report_fatal_error(String message, Object info) {
	  done_parsing();
	  report_error("Error de sintaxis fatal : " + "No se puede recuperar del error y continuar con el analisis - "+ message + " ",(Symbol)info);
	  report_error("** Final del analisis.", null);
	  System.exit(1);
	}
  
:}

action code
{:
	Hashtable<String, t_symbol> tabla_symbol = new Hashtable<String, t_symbol>();
	ArrayList<Integer> listaLineas = new ArrayList<Integer>();
	ArrayList<String> listaData = new ArrayList<String>();
	ArrayList<Integer> value_gosub = new ArrayList<Integer>();
	ArrayList<String> var_for = new ArrayList<String>();
	int cont_gosub_return = 0;
	int cont_for = 0;
	int contRead=0;
	int numErr=0;
	int numErrS=0;
	StringBuffer buffer_finish =new StringBuffer();

public void addfunc(String name, String valor, int linea){
	String[] nameFun = name.split(" ");
	if(tabla_symbol.contains(nameFun[0])){
		System.err.println("Error al declarar la funcion, ya existe una con ese nombre "+ nameFun[0]+" linea "+ linea);
		numErrS++;
	}else{
		tabla_symbol.put(nameFun[0], new t_symbol("FUNCION", valor));
	}
}
public void checkFunExists(String name, int linea){
	String[] nameFun = name.split(" ");
	if(!tabla_symbol.containsKey(nameFun[0])){
		System.err.println("Error semantico la funcion no ha sido definida anteriormente linea -> "+linea);
		numErrS++;
	}
}

public void checkFunMat(String nombre,String valor ,int linea){
	if(nombre.equals("EXP")){
		if(Integer.parseInt(valor) > 999999999 && Integer.parseInt(valor) > -999999999 ){ //infinito
			System.err.println("Error semantico el valor para la funcion EXP es demasiado grande linea -> "+linea);
			numErrS++;
		}
	} else if(nombre.equals("TAN")){
		if(Integer.parseInt(valor) > 999999999 && Integer.parseInt(valor) > -999999999){ //infinito
			System.err.println("Error semantico el valor para funcion TAN es demasiado grande que 0 linea -> "+linea);
			numErrS++;
		}
	}else if(nombre.equals("ATN")){
		if(Integer.parseInt(valor) > 999999999 && Integer.parseInt(valor) > -999999999){ //infinito
			System.err.println("Error semantico el valor para funcion ATN es demasiado grande que 0 linea -> "+linea);
			numErrS++;
		}
	}else if(nombre.equals("LOG")){
		if(Integer.parseInt(valor) >=0){
			System.err.println("Error semantico la funcion LOG tiene que ser mayor igual que 0 linea -> "+linea);
			numErrS++;
		}
	}else if(nombre.equals("SQR")){
		if(Integer.parseInt(valor) > 0){
			System.err.println("Error semantico la funcion SQR tiene que ser mayor que 0 linea -> "+linea);
			numErrS++;
		}
	}
}
public void addWordBook(String name){
	tabla_symbol.put(name, new t_symbol("PALABRA_RESERVADA"));
}

public void addVariable(String name, String valor ,int linea){
	boolean put = false;
	if(tabla_symbol.isEmpty()){
		if(checkNumOrCad(name)){
			if(name.length() > 1){
				tabla_symbol.put(name, new t_symbol("NUM_SUSCRITA", valor));
			}else{
				tabla_symbol.put(name, new t_symbol("NUMERICA", valor));
			}
		}else{
			tabla_symbol.put(name, new t_symbol("CADENA", valor));
		}
	}else{
		Enumeration e=tabla_symbol.keys();
		while(e.hasMoreElements()){
			char varName = name.charAt(0);
			String key = e.nextElement().toString();
			t_symbol sym = tabla_symbol.get(key);
			if(!sym.getTipo().equals("PALABRA_RESERVADA") && !sym.getTipo().equals("FUNCION")){
				if(name.length() > 1 && name.charAt(1) == '$'){
					if(tabla_symbol.contains(key)){
						System.err.println("Error semantico al declarar la variable ya existe una con ese nombre "+name+" linea -> "+linea);
						numErrS++;
					}else{
						if(valor.length() > 18){
							System.err.println("Error semantico el valor de la variable cadena es demasiado largo  linea -> "+linea);
							numErrS++;
						}else{
							put = true;
						}
						
					}
				}else{
					if(key.charAt(0) == varName){
						System.err.println("Error semantico al declarar la variable ya existe una con ese nombre "+name+" linea -> "+linea);
						numErrS++;
					}else{
						put=true;
					}
				}
			}
				
		}
		if(put){
			if(checkNumOrCad(name)){
				if(name.length() > 1){
					tabla_symbol.put(name, new t_symbol("NUM_SUSCRITA", valor));
				}else{
					tabla_symbol.put(name, new t_symbol("NUMERICA", valor));
				}
			}else{
				tabla_symbol.put(name, new t_symbol("CADENA", valor));
			}
		}
	}	
}

public void checkVarExist(String var, int linea){
	boolean exist = false;
	if(tabla_symbol.isEmpty()){
		System.err.println("Error semantico el operando no se encuentra definido como una variable  "+var+" linea -> "+linea);
		numErrS++;
	}else{
		Enumeration e=tabla_symbol.keys();
		while(e.hasMoreElements()){
			char varName = var.charAt(0);
			String key = e.nextElement().toString();
			if(key.length() == 1 || key.charAt(1) != '$'){ //==1 para variables numericas simples el otro para que no coja cadena
				if(key.charAt(0) == varName){
					exist=true;
				}
			}else{
				if(key.equals(var)){
					exist=true;
				}
			}
		}
		if(!exist){
			System.err.println("Error semantico el operando no se encuentra definido como una variable  "+var+" linea -> "+linea);
			numErrS++;
		}
	}	
}

public void checkVar(String name, String valor, int linea){
	if(tabla_symbol.containsKey(name)){
		if(!checkNumOrCad(name) && valor.length() > 18){
			System.err.println("Error semantico el valor de la variable cadena es demasiado largo  linea -> "+linea);
			numErrS++;
		}else{
				t_symbol simbol = tabla_symbol.get(name);
				simbol.setValor(valor);
				tabla_symbol.replace(name, simbol);
		}
	}else{
		addVariable(name, valor, linea);
	}
	
}

public boolean checkNumOrCad(String var){ //funcion para comprobar si es id de cadena o numerico
	boolean numeric = true;
	for(int i = 0; i < var.length(); i++){
		if(var.charAt(i)=='$'){
			numeric = false;
		}
	}
	return numeric;
}

public void checkLine(String entero, int nleft){
	int linea = Integer.parseInt(entero.toString());
	if(listaLineas.isEmpty() || linea > listaLineas.get(listaLineas.size()-1)){
		listaLineas.add(linea);
	}else{
		numErr++;
		System.err.println("Error semantico al introducir la linea " + nleft + " debe ser un numero mayor al anterior");
	}
}

public boolean checkExistLine(String digito){
  int aux=0;
  aux = Integer.parseInt(digito);
  return listaLineas.contains(aux);
}

public void checkPrintVar(String id, int linea){
    if(!tabla_symbol.containsKey(id)){
      System.err.println("Error semantico para imprimir en la linea "+linea+" la variable "+id+" no existe");
	  numErrS++;
    }
}

public void addData(String data, String valor, int linea){
   listaData.add(data);
}
public static boolean isNumeric(String cad) {
    boolean isValid = true;
    try {
		if(cad.equals("")){
			isValid = false;
		}
        Integer.parseInt(cad);
    } catch (NumberFormatException excepcion) {
        isValid = false;
    }
    return isValid;
}
private static boolean isDouble(String cad) {
    boolean isValid = true;
    try {
		if(cad.equals("")){
			isValid = false;
		}
        Double.parseDouble(cad);
    } catch(NumberFormatException nfe) {
        isValid = false;
    }
    return isValid;
}

public void checkRead(String name, int linea){
	if(contRead < listaData.size()-1){
		String valor = listaData.get(contRead);
		if(!checkNumOrCad(name)){ //cadena
			if(!isNumeric(valor) || !isDouble(valor)){
				if(tabla_symbol.containsKey(name)){
					t_symbol simbol = tabla_symbol.get(name);
					simbol.setValor(valor);
					tabla_symbol.replace(name, simbol);
				}else{
					addVariable(name, valor, linea);
				}
			}else{
				System.err.println("Error semantico estas intentado guardar un numero en una variable de cadena " +name+" linea -> "+linea);
				numErrS++;
			}
		}else{ //numerica
			if(isNumeric(valor) || isDouble(valor)){
				if(tabla_symbol.containsKey(name)){
					t_symbol simbol = tabla_symbol.get(name);
					simbol.setValor(valor);
					tabla_symbol.replace(name, simbol);
				}else{
					addVariable(name, valor, linea);
				}
			}else{
				System.err.println("Error semantico estas intentado guardar una cadena en una variable numerica " +name+" linea -> "+linea);
				numErrS++;
			}
		}
	}else{
		System.err.println("Error semantico hay demasiadas variables declaras en el READ");
		numErrS++;
	}	
}
private boolean checkGoSub(){
	boolean correct = true;
	for(int i =0; i < value_gosub.size(); i++){
		if(!listaLineas.contains(value_gosub.get(i))){
			correct = false;
		}
	}
	return correct;
}

public void checkDim(String dec, int s){
  String num1 = "";
  String num2 = "";
  int posComa = 0;
  	for(int i=2;i<dec.length()-1;i++){ //Bucle for para detectar si hay comas
		if(dec.charAt(i)==','){
			posComa = i;
		}
	}
	if(posComa==0){
		for(int j=2;j<dec.length()-1;j++){
			if(dec.charAt(j)!=')'){
				num1=num1+dec.charAt(j);
			}
		}
	}else{
		for(int i=2;i<posComa;i++){
			num1=num1+dec.charAt(i);
		}
		for(int i=posComa+1;i<dec.length()-1;i++){
			num2=num2+dec.charAt(i);
		}
	}
	if(num2!=""){
   		if(Integer.parseInt(num1)<0 || Integer.parseInt(num1)>10 || Integer.parseInt(num2)<0 || Integer.parseInt(num2)>10){
    		System.err.println("Error semantico en el numero definido no esta entre 0 - 10 -> Linea: "+s);
			numErrS++;
		}else{
			addVariable(dec, "", s);
		}
  	}else{
   		if(Integer.parseInt(num1)<0 || Integer.parseInt(num1)>10){
    		System.err.println("Error semantico en el numero definido no esta entre 0 - 10 -> Linea: "+s);
			numErrS++;
		}else{
			addVariable(dec, "", s);
		}
  	}
 }
public String print_tabla_sym(){
	String s="";
	s+= "***** PALABRAS RESERVADAS *****\n";
	s+="NOMBRE\t\t\t\tTIPO\n";
	Enumeration hash1 = tabla_symbol.keys();
	while(hash1.hasMoreElements()){
		String key = hash1.nextElement().toString();
		t_symbol sim=tabla_symbol.get(key);
		if(sim.getTipo().equals("PALABRA_RESERVADA")){
			s+=key+"\t\t\t\t"+sim.getTipo()+"\n";
		}
	}


	s+="********** VARIABLES ***********\n";
	s+="NOMBRE\t\tTIPO\t\tINICIALIZADO\n";
	
	Enumeration hash = tabla_symbol.keys();
	while(hash.hasMoreElements()){
		
		String key = hash.nextElement().toString();
		t_symbol sim=tabla_symbol.get(key);
		if(!sim.getTipo().equals("PALABRA_RESERVADA")){
				s+=key+"\t\t"+sim.getTipo()+"\t\t"+sim.getValor()+"\n";
		}
	}
	return s;
}
public void finish(){
	buffer_finish.append("\n*****ANALISIS FINALIZADO*******\n");
	buffer_finish.append("Numero de errores sintacticos: "+numErr+"\n");
	buffer_finish.append("Numero de errores semanticos: "+numErrS+"\n\n");
	if(numErr==0 && numErrS==0){
		buffer_finish.append("******* TABLA DE SIMBOLOS *******\n");
		buffer_finish.append(print_tabla_sym()); 
		buffer_finish.append("\n");
	}
	System.out.println(buffer_finish.toString());
}
:}
terminal		DATA, DEF, DIM, END, FOR, GO, GOSUB, GOTO, IF, INPUT, LET, NEXT, ON, PRINT, RND, READ, 
				REM, RESTORE, RETURN, STEP, STOP, THEN, TO, IGUAL, MAS, MENOS, MUL, ID_CADENA, ID_NUM_SUS, 
				DIVISION, CRLF, PUNTOYCOMA, FUNCION_MAT, PARENTESIS_IZQ, PARENTESIS_DER, ID_NUM, 
				RANDOMIZE, FUNCION, EXPONENTE, COMA, MENOR, MAYOR, MAYOR_IGUAL, MENOR_IGUAL, DISTINTO,
				ENTERO, CONSTANTE_NUM;
				
terminal String CONSTANTE;

non terminal String	inicio,programa, leerLinea, expresion, operacion, operador, operadorParent, opcion2, imprimir;
non terminal String	operaciones, funcionMat, variable, asignacion, declaracion, if_then, operando, opcion;
non terminal String goto, comparacion, on_goto, multiple_goto, gosub_return, inicioLinea, mete_entero,print,
					item, nextItem, data, data_var, input_var, input, read, read_var, more_read, for_to,
					variable_num, limit_for, igualLet, variable_if, to_go;

precedence right MAS, MENOS;
precedence right MUL, DIVISION,EXPONENTE;

//Gramatica 
start with inicio;

inicio			::= programa{:finish();:};

programa        ::= mete_entero END 
							{:
								if(cont_gosub_return != 0){
									System.err.println("Error semantico se esperaba una sentencia RETURN para el GOSUB ");
									numErrS++;
								} 
								if(!checkGoSub()){
									System.err.println("Error semantico la linea definida para el GOSUB no existe ");
									numErrS++;
								}
								addWordBook("END");
							:}
					| inicioLinea programa 
					| mete_entero RETURN:re 
							{:
								if(cont_gosub_return == 0){
									System.err.println("Error semantico se esperaba una sentencia GOSUB para el return ");
									numErrS++;
								}else{
									cont_gosub_return--;
									addWordBook("RETURN");
								}
								
							:} CRLF programa
					| error programa {:numErr++;:};

inicioLinea		::= mete_entero leerLinea CRLF
					| mete_entero REM CRLF
					| mete_entero STOP CRLF;

mete_entero		::= ENTERO:e
						{: 
							checkLine(e.toString(), eleft+1);
						:};

leerLinea		::=  DEF expresion {:addWordBook("DEF");:}
					| goto
					| on_goto
					| if_then
					| gosub_return
					| print
					| read
					| data
					| input
					| for_to
					| DATA data {:addWordBook("DATA");:}
					| NEXT ID_NUM:var 
						{:
							int linea = varleft +1;
							if(cont_for == 0){
								System.err.println("Error semantico se esperaba un FOR antes del NEXT linea ->" + linea );
								numErrS++;
							}else if(!var.equals(var_for.get(cont_for-1))){
								System.err.println("Error semantico el NEXT espera la variable del ultimo FOR linea ->" + linea );
								numErrS++;
							}
							cont_for--;
							addWordBook("NEXT");
							
						:}
					| NEXT PARENTESIS_IZQ ID_NUM:var PARENTESIS_DER
						{:
							int linea = varleft +1;
							if(cont_for == 0){
								System.err.println("Error semantico se esperaba un FOR antes del NEXT linea ->" + linea );
								numErrS++;
							}else if(!var.equals(var_for.get(cont_for-1))){
								System.err.println("Error semantico el NEXT espera la variable del ultimo FOR linea ->" + linea );
								numErrS++;
							}
							cont_for--;
							addWordBook("NEXT");
							
						:}
					| RANDOMIZE {:addWordBook("RANDOMIZE");:}
					| RESTORE {:contRead=0;addWordBook("RESTORE");:}
					| LET asignacion {:addWordBook("LET");:}
					| DIM declaracion {:addWordBook("DIM");:}
					| error {:numErr++;:};
// FOR...TO...STEP...NEXT
for_to 			::= FOR variable_num:var IGUAL limit_for:limit1 TO limit_for:limit2
						{:	
							int linea = varleft+1;
							if(var != "ID_NUM"){
								System.err.println("Error semantico la variable del FOR no es valida linea ->" + linea );
								numErrS++;
								var_for.remove(cont_for);
							}else if(limit1 != "NUMBER" || limit2 !="NUMBER"){
								linea = limit2left+1;
								System.err.println("Error semantico los valores limites del FOR no es numero linea ->" + linea );
								numErrS++;
								var_for.remove(cont_for);
							}
							cont_for++;
							addWordBook("FOR");

						:}
					| FOR variable_num:var IGUAL limit_for:limit1 TO limit_for:limit2 STEP limit_for:limit3
						{:	
							int linea = varleft+1;
							if(var != "ID_NUM"){
								System.err.println("Error semantico la variable del FOR no es valida linea ->" + linea );
								numErrS++;
								var_for.remove(cont_for);
							}else if(limit1 != "NUMBER" || limit2 !="NUMBER"){
								linea = limit2left+1;
								System.err.println("Error semantico los valores limites del FOR no es numero linea ->" + linea );
								numErrS++;
								var_for.remove(cont_for);
							}
							cont_for++;		
							addWordBook("FOR");			
						:};
limit_for 		::= CONSTANTE_NUM
						{:
							RESULT="NUMBER";
						:}
					| ENTERO
						{:
							RESULT="NUMBER";
						:}
					| ID_NUM
						{:
							RESULT="NUMBER";
						:};
//INPUT
input 			::= INPUT input_var{:addWordBook("INPUT");:}; 
input_var		::= variable | variable COMA input_var | CONSTANTE nextItem input_var;
//READ
read			::= READ read_var{:addWordBook("READ");:};
read_var		::= variable:var
						{:
							checkRead(var.toString(), varleft);
							contRead++;
						:} 
					| variable:var 
						{:
							checkRead(var.toString(), varleft);
							contRead++;
						:} more_read;
more_read		::= COMA variable:var
						{:
							checkRead(var.toString(), varleft);
							contRead++;
						:}
					| COMA variable:var 
						{:
							checkRead(var.toString(), varleft);
							contRead++;
						:} more_read
					| error {:numErr++;:};
//DATA
data 			::= CONSTANTE_NUM:id {:addData(id.toString(), "NUMERICA", idleft+1);:} 
					| CONSTANTE:id {:addData(id.toString(),"CADENA", idleft+1);:} 
					| CONSTANTE_NUM:id {:addData(id.toString(),"NUMERICA",  idleft+1);:}  data_var 
					| CONSTANTE:id {:addData(id.toString(),"CADENA", idleft+1);:} data_var  ;

data_var 		::= COMA CONSTANTE_NUM:id {:addData(id.toString(),"NUMERICA",  idleft+1);:} 
					| COMA CONSTANTE_NUM:id {:addData(id.toString(),"NUMERICA",  idleft+1);:} data_var   
					| COMA CONSTANTE:id {:addData(id.toString(),"CADENA", idleft+1);:} 
					| COMA CONSTANTE:id {:addData(id.toString(),"CADENA", idleft+1);:} data_var    
					| error {:numErr++;:};
//PRINT
print 			::= PRINT imprimir {:addWordBook("PRINT");:}
					| PRINT{:addWordBook("PRINT");:};

imprimir		::=  item 
					| item nextItem imprimir ;

item			::= operacion
					| ID_CADENA:id
						{:
							checkPrintVar(id.toString(),idleft+1);
						:}
					| CONSTANTE
					| error {:numErr++;:};

nextItem		::= PUNTOYCOMA | COMA;
//GOSUB...RETURN
gosub_return	::= GOSUB CONSTANTE_NUM:e
						{:
							value_gosub.add(Integer.parseInt(e.toString()));
							cont_gosub_return ++;
							addWordBook("GOSUB");
						:};
						
//DEF
expresion		::= FUNCION:fn IGUAL operacion:op
							{:
								addfunc(fn.toString(),op.toString(),fnleft+1);
							:} 
					| error{:numErr++;:};
//LET
asignacion		::= variable:var IGUAL operacion:op
							{:
								int lineaErr = varleft+1;
								if(checkNumOrCad(var)){
									checkVar(var, op, lineaErr);
								}else{
									System.err.println("Error semantico estas intentando guardar una cadena en un variable numerica "+ lineaErr);
									numErrS++;
								}	
							:} 
					| variable:var IGUAL igualLet:op
							{:
								int lineaErr = varleft+1;
								if(!checkNumOrCad(var)){
									checkVar(var, op, lineaErr);
								}else{
									System.err.println("Error semantico estas intentando guardar una operacion en un variable cadena "+ lineaErr);
									numErrS++;
								}	
							:};
// ASIGNACION LET
igualLet		::= CONSTANTE:var 
						{:RESULT = var.toString();:}
					| MAS:var igualLet:op {:RESULT = "+ "+op.toString();:}
					| ID_CADENA:var {:RESULT = var.toString();:}
					| CONSTANTE:var igualLet:op 
						{:RESULT = var.toString() + " "+op.toString();:}
					| ID_CADENA:var igualLet:op {:RESULT = var.toString() + " "+op.toString();:};
// FUNCIONES MATEMATICAS
funcionMat		::= PARENTESIS_IZQ operacion:o PARENTESIS_DER {:RESULT = "( "+o+" )";:}
					| error {:numErr++;:};

//DIM 
declaracion		::= ID_NUM_SUS:id {:checkDim(id.toString(), idleft);:} 
					| ID_NUM_SUS:id COMA declaracion {:checkDim(id.toString(), idleft);:};
//VARIABLES
variable		::= ID_NUM:var{:addVariable(var.toString(),"", varleft+1); RESULT = var.toString();:} 
					| ID_NUM_SUS:var{:addVariable(var.toString(),"", varleft+1); RESULT = var.toString();:} 
					| ID_CADENA: var{:addVariable(var.toString(),"", varleft+1); RESULT = var.toString();:};
//VARIABLE NUMERICA FOR
variable_num	::= ID_NUM:var {:var_for.add(var.toString()); RESULT = "ID_NUM";:};
//GOTO
goto 			::= GOTO CONSTANTE_NUM:i 
						{:
							if(!checkExistLine(i.toString())){
								int linea = ileft+1;
								System.err.println("Error semantico la linea para el GOTO no existe "+i.toString()+" linea: " + linea);
								numErr++;
							}
							addWordBook("GOTO");
						:}
					| GO TO CONSTANTE_NUM:i 
						{:
							if(!checkExistLine(i.toString())){
								int linea = ileft+1;
								System.err.println("Error semantico la linea para el GOTO no existe "+i.toString()+" linea: " + linea);
								numErr++;
							}
							addWordBook("GO_TO");
						:};
//ON...GOTO
on_goto			::= ON operacion GOTO multiple_goto {:addWordBook("ON_GOTO");:} | ON operacion GO TO multiple_goto{:addWordBook("ON_GO_TO");:};
multiple_goto	::= CONSTANTE_NUM:i 
						{:
							if(!checkExistLine(i.toString())){
								int linea = ileft+1;
								System.err.println("Error semantico la linea para el GOTO no existe "+i.toString()+" linea: " + linea);
								numErr++;
							}
						:}
					| CONSTANTE_NUM:i COMA multiple_goto
						{:
							if(!checkExistLine(i.toString())){
								int linea = ileft+1;
								System.err.println("Error semantico la linea para el GOTO no existe "+i.toString()+" linea: " + linea);
								numErr++;
							}
						:}
					| ENTERO:i 
						{:
							if(!checkExistLine(i.toString())){
								int linea = ileft+1;
								System.err.println("Error semantico la linea para el GOTO no existe "+i.toString()+" linea: " + linea);
								numErr++;
							}
						:}
					| ENTERO:i COMA multiple_goto
						{:
							if(!checkExistLine(i.toString())){
								int linea = ileft+1;
								System.err.println("Error semantico la linea para el GOTO no existe "+i.toString()+" linea: " + linea);
								numErr++;
							}
						:};
//IF THEN
if_then 		::= IF operacion comparacion operacion THEN to_go{:addWordBook("IF_THEN");:}  //Se contempla tambien las variables suscritas y simples
					| IF variable_if comparacion variable_if THEN to_go{:addWordBook("IF_THEN");:}; //para comparacion con una cadena

variable_if		::= ID_CADENA: var{:checkVarExist(var.toString(), varleft+1);:}
					| CONSTANTE ;

to_go			::= goto | gosub_return;
//COMPARACION
comparacion		::= DISTINTO | MAYOR_IGUAL | MENOR_IGUAL | IGUAL | MENOR | MAYOR ;
//EXPRESION NUMERICA
operacion       ::= opcion:o {: RESULT = o; :}
					| error opcion ;

opcion          ::= operaciones:o {: RESULT = o;:}
					| PARENTESIS_IZQ operaciones:o PARENTESIS_DER opcion2:o2 {:RESULT = "( "+o+" ) " + o2;:};

operaciones     ::= operador:o operando:op operadorParent:opa opcion2:o2 {:String s=o+""+op+""+opa+""+o2; RESULT=s;:}
					| operando:o1 operador:o operando:o2 operadorParent:opa opcion2:op2 {:String s=o1+""+o+""+o2+""+opa+""+op2; RESULT=s;:}
					| operando:o1 operadorParent:opa {:String s=o1+""+opa;RESULT = s;:};

opcion2         ::= opcion:o {:RESULT=o;:} | {:RESULT="";:} ;

operando        ::= CONSTANTE_NUM:id {:RESULT=id.toString();:} 
					| ID_NUM_SUS:id {:checkVarExist(id.toString(), idleft+1);RESULT=id.toString();:}
					| ID_NUM:id {:checkVarExist(id.toString(), idleft+1); RESULT=id.toString();:}
					| FUNCION_MAT:fn funcionMat:o {:addWordBook(fn.toString());checkFunMat(fn.toString(),o.toString(), fnleft); String s =  fn + " " +o; RESULT = s;:}
					| FUNCION:fn {:checkFunExists(fn.toString(), fnleft+1); RESULT = fn.toString();:}
					| RND:rn {:addWordBook("RND");RESULT = rn.toString();:};

operadorParent  ::= operador:o {:RESULT=o;:}
					 | {:RESULT="";:};
					 
operador        ::= MAS {:RESULT="+";:}
					| MENOS {:RESULT="-";:}
					| DIVISION {:RESULT="/";:}
					| MUL {:RESULT="*";:}
					| EXPONENTE {:RESULT="^";:};		