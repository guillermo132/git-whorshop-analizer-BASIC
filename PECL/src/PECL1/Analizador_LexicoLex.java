/* The following code was generated by JFlex 1.4.3 on 30/11/17 15:42 */

package PECL1;

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import java.util.ArrayList;

// import PECL1.Analizador_LexicoSym;
// import static PECL1.Analizador_LexicoSym.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 30/11/17 15:42 from the specification file
 * <tt>E:/UNI/PROCESADORES/PECL/src/analizador_lexico.lex</tt>
 */
class Analizador_LexicoLex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int estadoNumero = 2;
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\12\0\1\32\2\0\1\33\22\0\1\26\1\20\1\17\1\2\1\7"+
    "\1\2\1\2\1\21\1\22\1\23\1\24\1\27\1\20\1\30\1\31"+
    "\1\20\12\16\1\20\1\14\1\20\1\25\1\20\1\20\1\1\1\35"+
    "\1\51\1\15\1\34\1\37\1\40\1\46\1\56\1\41\2\15\1\53"+
    "\1\42\1\43\1\44\1\52\1\15\1\45\1\47\1\36\1\50\2\15"+
    "\1\54\1\15\1\55\1\0\1\1\1\0\1\20\1\20\1\0\32\15"+
    "\3\0\1\1\43\0\1\4\11\0\1\6\25\0\1\5\1\3\36\0"+
    "\1\10\233\0\1\13\u0147\0\1\12\u1d53\0\1\11\udfe5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\3\1\1\3\1\4\1\5\1\1"+
    "\1\6\1\7\1\10\1\1\1\11\1\12\1\13\1\14"+
    "\14\4\2\0\1\15\2\0\1\16\1\17\1\20\3\0"+
    "\1\21\7\0\1\21\32\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[76];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\57\0\136\0\215\0\274\0\57\0\353"+
    "\0\u011a\0\u0149\0\u0178\0\57\0\57\0\u01a7\0\57\0\57"+
    "\0\57\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292\0\u02c1\0\u02f0"+
    "\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a\0\215\0\u0439"+
    "\0\57\0\u0468\0\u0149\0\57\0\u01a7\0\57\0\u0497\0\u04c6"+
    "\0\u04f5\0\57\0\u0524\0\u0553\0\u0582\0\u05b1\0\u05e0\0\u060f"+
    "\0\u063e\0\u066d\0\u069c\0\u06cb\0\u06fa\0\u0729\0\u0758\0\u0787"+
    "\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1\0\u08d0\0\u08ff"+
    "\0\u092e\0\u095d\0\u098c\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\u0a77"+
    "\0\u0aa6\0\u0ad5\0\u0b04\0\u0b33";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[76];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\4\1\2\1\5\1\2\1\3\1\6"+
    "\3\2\1\7\1\10\1\11\1\12\1\2\1\13\2\2"+
    "\1\14\1\15\1\16\1\17\1\20\1\2\1\21\1\22"+
    "\1\23\1\10\1\24\1\25\1\26\1\27\1\10\1\30"+
    "\1\31\1\32\1\33\1\34\2\10\1\35\1\36\3\10"+
    "\63\0\1\3\60\0\1\3\61\0\1\37\1\40\53\0"+
    "\1\41\12\0\1\42\52\0\1\11\42\0\1\43\4\0"+
    "\1\43\4\0\3\43\1\44\12\43\2\0\23\43\2\0"+
    "\1\13\4\0\1\13\4\0\16\13\2\0\23\13\16\0"+
    "\1\45\72\0\1\46\33\0\1\41\12\0\1\42\12\0"+
    "\1\47\1\0\1\50\1\0\1\51\24\0\1\41\12\0"+
    "\1\42\21\0\1\52\11\0\1\53\7\0\1\41\12\0"+
    "\1\42\20\0\1\54\22\0\1\41\12\0\1\42\21\0"+
    "\1\55\21\0\1\41\12\0\1\42\15\0\1\52\2\0"+
    "\1\56\22\0\1\41\12\0\1\42\14\0\1\57\26\0"+
    "\1\41\12\0\1\42\20\0\1\52\22\0\1\41\12\0"+
    "\1\42\12\0\1\60\1\0\1\61\26\0\1\41\12\0"+
    "\1\42\21\0\1\62\21\0\1\41\12\0\1\42\13\0"+
    "\1\63\27\0\1\41\12\0\1\42\22\0\1\64\20\0"+
    "\1\41\12\0\1\42\14\0\1\65\32\0\1\3\60\0"+
    "\1\66\1\67\10\0\3\66\2\0\23\66\36\0\1\70"+
    "\60\0\1\52\60\0\1\52\53\0\1\71\53\0\1\52"+
    "\67\0\1\52\63\0\1\72\60\0\1\65\45\0\1\73"+
    "\50\0\1\54\1\74\3\0\1\52\4\0\1\75\45\0"+
    "\1\76\10\0\1\77\46\0\1\100\4\0\1\100\53\0"+
    "\1\101\53\0\1\52\35\0\1\102\1\103\4\0\1\41"+
    "\3\0\3\102\2\0\23\102\15\0\1\102\1\67\4\0"+
    "\1\41\3\0\3\102\2\0\23\102\35\0\1\52\64\0"+
    "\1\52\63\0\1\65\42\0\1\104\72\0\1\105\44\0"+
    "\1\106\64\0\1\52\62\0\1\107\60\0\1\52\47\0"+
    "\1\65\36\0\1\41\51\0\1\103\4\0\1\41\77\0"+
    "\1\110\57\0\1\71\55\0\1\111\63\0\1\52\47\0"+
    "\1\112\61\0\1\113\52\0\1\114\54\0\1\52\74\0"+
    "\1\113\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[2914];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\1\11\4\1\2\11\1\1\3\11"+
    "\15\1\2\0\1\11\2\0\1\11\1\1\1\11\3\0"+
    "\1\11\7\0\1\1\32\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[76];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
	private static ArrayList<String> tokensList = new ArrayList<String>();
	//private static ArrayList<String> errorList = new ArrayList<String>();
	 
	/* Método de escribir en el fichero de salida y por pantalla*/
	private void writeOutputFile() throws IOException {
		String filename = "file.out";
		BufferedWriter out = new BufferedWriter(new FileWriter(filename));
		System.out.print("[");
 		out.write("[");
		
		for (String s : this.tokensList) {
			if(s=="CRLF" || s=="LF"){
		 		System.out.print(s+",\n");
		 		out.write(s + ",\n");
		 	}
		 	else{
			 	System.out.print(s+",");
			 	out.write(s + ",");
			 }
	 	} 
	 	System.out.print("EOF]");
 		out.write("EOF]");
	 	out.close();
	}



  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Analizador_LexicoLex(java.io.Reader in) {
  
	this.tokensList = new ArrayList();
   // this.errorList = new ArrayList();
    
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Analizador_LexicoLex(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 156) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 5: 
          { this.tokensList.add("ent(" + yytext() + ")");
          }
        case 18: break;
        case 17: 
          { this.tokensList.add(yytext());
          }
        case 19: break;
        case 15: 
          { this.tokensList.add("const(" + yytext().substring(1)+ ")");
          }
        case 20: break;
        case 10: 
          { this.tokensList.add("menos");
          }
        case 21: break;
        case 3: 
          { this.tokensList.add("PUNTOYCOMA");
          }
        case 22: break;
        case 11: 
          { this.tokensList.add("LF");
          }
        case 23: break;
        case 8: 
          { this.tokensList.add("igual");
          }
        case 24: break;
        case 9: 
          { this.tokensList.add("mas");
          }
        case 25: break;
        case 7: 
          { this.tokensList.add("mul");
          }
        case 26: break;
        case 1: 
          { /* Regla léxica para evitar estrellarse cuando se encuentra algo extraño, no hacemos nada tampoco */
          }
        case 27: break;
        case 6: 
          { this.tokensList.add("CADENA REM: "+yytext());
          }
        case 28: break;
        case 2: 
          { System.out.println("Error lexico en linea " + (yyline+1) +  ": " + yytext() );
          }
        case 29: break;
        case 16: 
          { this.tokensList.add("CRLF");
          }
        case 30: break;
        case 4: 
          { this.tokensList.add("id("+yytext()+")");
          }
        case 31: break;
        case 12: 
          { this.tokensList.add("CR");
          }
        case 32: break;
        case 14: 
          { this.tokensList.add("const(" + yytext().substring(1,yytext().length()-1) + ")");
          }
        case 33: break;
        case 13: 
          { this.tokensList.add("ide(" + yytext() + ")");
          }
        case 34: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              {
                this.writeOutputFile(); System.exit(0);  /* Código ejecutado cuando se encuentra EOF */
              }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }

  /**
   * Runs the scanner on input files.
   *
   * This is a standalone scanner, it will print any unmatched
   * text to System.out unchanged.
   *
   * @param argv   the command line, contains the filenames to run
   *               the scanner on.
   */
  public static void main(String argv[]) {
    if (argv.length == 0) {
      System.out.println("Usage : java Analizador_LexicoLex <inputfile>");
    }
    else {
      for (int i = 0; i < argv.length; i++) {
        Analizador_LexicoLex scanner = null;
        try {
          scanner = new Analizador_LexicoLex( new java.io.FileReader(argv[i]) );
          while ( !scanner.zzAtEOF ) scanner.next_token();
        }
        catch (java.io.FileNotFoundException e) {
          System.out.println("File not found : \""+argv[i]+"\"");
        }
        catch (java.io.IOException e) {
          System.out.println("IO error scanning file \""+argv[i]+"\"");
          System.out.println(e);
        }
        catch (Exception e) {
          System.out.println("Unexpected exception:");
          e.printStackTrace();
        }
      }
    }
  }


}
